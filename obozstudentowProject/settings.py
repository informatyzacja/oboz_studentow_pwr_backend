"""
Django settings for obozstudentowProject project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os, json
from dotenv import load_dotenv
from datetime import timedelta


def get_secret(key, default):
    value = os.getenv(key, default)
    if os.path.isfile(value):
        with open(value) as f:
            return f.read().strip("\n").strip()
    return value


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

from django.core.management.utils import get_random_secret_key

SECRET_KEY = get_secret("SECRET_KEY", get_random_secret_key())

ADMIN_EMAIL = os.getenv("ADMIN_EMAIL", "admin@localhost")
ADMINS = [(ADMIN_EMAIL, ADMIN_EMAIL)]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "true").lower() == "true"

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost").split(",")

CORS_ALLOWED_ORIGINS = os.getenv("CORS_ALLOWED_ORIGINS", "http://localhost").split(",")
CORS_ALLOW_ALL_ORIGINS = os.getenv("CORS_ALLOW_ALL_ORIGINS", "false").lower() == "true"

# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "obozstudentow",
    "obozstudentow_async",
    "bereal",
    "tinder",
    "channels",
    "rest_framework",
    "corsheaders",
    "import_export",
    "orderable",
    "rest_framework_simplejwt",
    "django_celery_beat",
    "django_celery_results",
]

if DEBUG:
    INSTALLED_APPS.append("rest_framework.authtoken")


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "obozstudentowProject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "obozstudentowProject.wsgi.application"
ASGI_APPLICATION = "obozstudentowProject.asgi.application"

# Channels
# In-memory channel layer only for development
CHANNEL_LAYERS = json.loads(
    os.getenv(
        "CHANNEL_LAYERS",
        """{
    "default": {
		"BACKEND": "channels.layers.InMemoryChannelLayer"
	}
}""",
    )
)


DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "webmaster@localhost")
EMAIL_BACKEND = os.getenv(
    "EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend"
)
EMAIL_HOST = os.getenv("EMAIL_HOST", "localhost")
EMAIL_PORT = os.getenv("EMAIL_PORT", 25)
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = get_secret("EMAIL_HOST_PASSWORD", "")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "false").lower() == "true"
EMAIL_USE_SSL = os.getenv("EMAIL_USE_SSL", "false").lower() == "true"


MEDIA_ROOT = os.getenv("MEDIA_ROOT", BASE_DIR / "media/")
MEDIA_URL = os.getenv("MEDIA_URL", "/media/")


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.getenv("DB_NAME", BASE_DIR / "db.sqlite3"),
        "PASSWORD": get_secret("DB_PASSWORD", ""),
        "USER": os.getenv("DB_USER", ""),
        "HOST": os.getenv("DB_HOST", ""),
        "CONN_HEALTH_CHECKS": True,
    }
}

if os.getenv("DB_ENGINE", "") == "django.db.backends.postgresql":
    DATABASES["default"]["OPTIONS"] = {
        "pool": {
            "min_size": 4,
            "max_size": 20,
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 10,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "pl"

TIME_ZONE = "Europe/Warsaw"

USE_I18N = False

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.getenv("STATIC_ROOT", "./")
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom settings

AUTH_USER_MODEL = "obozstudentow.User"

LOGIN_URL = "/admin/login/"
LOGOUT_URL = "/admin/logout/"
LOGIN_REDIRECT_URL = "/admin/"
LOGOUT_REDIRECT_URL = "/admin/login/"

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        # 'rest_framework.authentication.SessionAuthentication',
    ],
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": (
            os.getenv("ANON_THROTTLE_RATE", "10/minute")
            if os.getenv("ANON_THROTTLE_RATE") != "None"
            else None
        ),
        "user": (
            os.getenv("USER_THROTTLE_RATE", "1800/hour")
            if os.getenv("USER_THROTTLE_RATE") != "None"
            else None
        ),
    },
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
}

SIMPLE_JWT = {
    "REFRESH_TOKEN_LIFETIME": timedelta(weeks=16),
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=10),
}

DATA_UPLOAD_MAX_MEMORY_SIZE = 25 * 1024 * 1024

DJANGORESIZED_DEFAULT_SIZE = [1920, 1080]
# DJANGORESIZED_DEFAULT_SCALE = 0.5
DJANGORESIZED_DEFAULT_QUALITY = 85
DJANGORESIZED_DEFAULT_KEEP_META = False
DJANGORESIZED_DEFAULT_FORCE_FORMAT = "JPEG"
DJANGORESIZED_DEFAULT_FORMAT_EXTENSIONS = {"JPEG": ".jpg"}

CSRF_FAILURE_VIEW = "obozstudentowProject.errorViews.error_crft"
CSRF_TRUSTED_ORIGINS = os.getenv("CSRF_TRUSTED_ORIGINS", "").strip().split(",")
if CSRF_TRUSTED_ORIGINS == [""]:
    CSRF_TRUSTED_ORIGINS = []

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

if not DEBUG:
    SECURE_SSL_REDIRECT = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = 3600 * 24 * 14  # 14 days
    SECURE_HSTS_PRELOAD = True

LOGGING = {
    "version": 1,
    "disable_existing_logger": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {asctime} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["mail_admins" if not DEBUG else "console"],
            "level": "ERROR",
            "propagate": False,
        },
        "django.security": {
            "handlers": ["mail_admins" if not DEBUG else "console"],
            "level": "ERROR",
            "propagate": False,
        },
        "py.warnings": {
            "handlers": ["console"],
        },
        "django.security.DisallowedHost": {
            "handlers": ["console"],
            "propagate": False,
        },
    },
    "root": {"level": "INFO"},
}

from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    "plan-campaign-utc-midnight": {
        "task": "app.tasks.schedule_today_prompt",
        "schedule": crontab(minute=1, hour=0),  # UTC
    },
    "catch-up": {
        "task": "app.tasks.catch_up_prompts",
        "schedule": crontab(minute="*/5"),
    },
}


CELERY_BROKER_URL = os.getenv("CELERY_BROKER", "redis://127.0.0.1:6379/0")
CELERY_RESULT_BACKEND = os.environ.get("CELERY_BACKEND", "django-db")
CELERY_CACHE_BACKEND = "django-cache"
CELERY_RESULT_EXTENDED = True
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
# Celery 5.x -> 6.0 deprecation: broker_connection_retry will no longer control
# startup retry behavior. Explicitly enable retries on startup to keep current behavior
# and silence the CPendingDeprecationWarning.
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
